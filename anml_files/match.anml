type Match;
type Fuse;

type FluentType;
type UT1;
type UT2;
type UT3;
fluent FluentType x(UT1 par1, UT2 par2, UT3 par3);

fluent boolean handfree;
fluent boolean match_used ( Match m ) ;
fluent boolean fuse_mended(Fuse f);
fluent boolean light;
fluent boolean light_2;

action light_match(Match m) {
   5 + 2 - -3 := 5;
   [start - 5 - 6] 1 := 4;
   [end] {
      1 := 3;
      5 == 4 or 3;
   };
};
